// Klib ABI Dump
// Targets: [androidNativeArm32, androidNativeArm64, androidNativeX64, androidNativeX86, iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, wasmWasi, watchosArm32, watchosArm64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <io.matthewnelson.kmp-log:log>
abstract class io.matthewnelson.kmp.log/Log { // io.matthewnelson.kmp.log/Log|null[0]
    constructor <init>(kotlin/String, io.matthewnelson.kmp.log/Log.Level) // io.matthewnelson.kmp.log/Log.<init>|<init>(kotlin.String;io.matthewnelson.kmp.log.Log.Level){}[0]
    constructor <init>(kotlin/String, io.matthewnelson.kmp.log/Log.Level, io.matthewnelson.kmp.log/Log.Level) // io.matthewnelson.kmp.log/Log.<init>|<init>(kotlin.String;io.matthewnelson.kmp.log.Log.Level;io.matthewnelson.kmp.log.Log.Level){}[0]

    final val max // io.matthewnelson.kmp.log/Log.max|{}max[0]
        final fun <get-max>(): io.matthewnelson.kmp.log/Log.Level // io.matthewnelson.kmp.log/Log.max.<get-max>|<get-max>(){}[0]
    final val min // io.matthewnelson.kmp.log/Log.min|{}min[0]
        final fun <get-min>(): io.matthewnelson.kmp.log/Log.Level // io.matthewnelson.kmp.log/Log.min.<get-min>|<get-min>(){}[0]
    final val uid // io.matthewnelson.kmp.log/Log.uid|{}uid[0]
        final fun <get-uid>(): kotlin/String // io.matthewnelson.kmp.log/Log.uid.<get-uid>|<get-uid>(){}[0]

    abstract fun log(io.matthewnelson.kmp.log/Log.Level, kotlin/String?, kotlin/String, kotlin/String?, kotlin/Throwable?): kotlin/Boolean // io.matthewnelson.kmp.log/Log.log|log(io.matthewnelson.kmp.log.Log.Level;kotlin.String?;kotlin.String;kotlin.String?;kotlin.Throwable?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.matthewnelson.kmp.log/Log.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.matthewnelson.kmp.log/Log.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.matthewnelson.kmp.log/Log.toString|toString(){}[0]
    open fun isLoggable(io.matthewnelson.kmp.log/Log.Level, kotlin/String?, kotlin/String): kotlin/Boolean // io.matthewnelson.kmp.log/Log.isLoggable|isLoggable(io.matthewnelson.kmp.log.Log.Level;kotlin.String?;kotlin.String){}[0]
    open fun onInstall() // io.matthewnelson.kmp.log/Log.onInstall|onInstall(){}[0]
    open fun onUninstall() // io.matthewnelson.kmp.log/Log.onUninstall|onUninstall(){}[0]

    final enum class Level : kotlin/Enum<io.matthewnelson.kmp.log/Log.Level> { // io.matthewnelson.kmp.log/Log.Level|null[0]
        enum entry Debug // io.matthewnelson.kmp.log/Log.Level.Debug|null[0]
        enum entry Error // io.matthewnelson.kmp.log/Log.Level.Error|null[0]
        enum entry Fatal // io.matthewnelson.kmp.log/Log.Level.Fatal|null[0]
        enum entry Info // io.matthewnelson.kmp.log/Log.Level.Info|null[0]
        enum entry Verbose // io.matthewnelson.kmp.log/Log.Level.Verbose|null[0]
        enum entry Warn // io.matthewnelson.kmp.log/Log.Level.Warn|null[0]

        final val entries // io.matthewnelson.kmp.log/Log.Level.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<io.matthewnelson.kmp.log/Log.Level> // io.matthewnelson.kmp.log/Log.Level.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): io.matthewnelson.kmp.log/Log.Level // io.matthewnelson.kmp.log/Log.Level.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<io.matthewnelson.kmp.log/Log.Level> // io.matthewnelson.kmp.log/Log.Level.values|values#static(){}[0]
    }

    final class Logger { // io.matthewnelson.kmp.log/Log.Logger|null[0]
        final val domain // io.matthewnelson.kmp.log/Log.Logger.domain|{}domain[0]
            final fun <get-domain>(): kotlin/String? // io.matthewnelson.kmp.log/Log.Logger.domain.<get-domain>|<get-domain>(){}[0]
        final val tag // io.matthewnelson.kmp.log/Log.Logger.tag|{}tag[0]
            final fun <get-tag>(): kotlin/String // io.matthewnelson.kmp.log/Log.Logger.tag.<get-tag>|<get-tag>(){}[0]

        final fun equals(kotlin/Any?): kotlin/Boolean // io.matthewnelson.kmp.log/Log.Logger.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.hashCode|hashCode(){}[0]
        final fun isLoggable(io.matthewnelson.kmp.log/Log.Level): kotlin/Boolean // io.matthewnelson.kmp.log/Log.Logger.isLoggable|isLoggable(io.matthewnelson.kmp.log.Log.Level){}[0]
        final fun log(io.matthewnelson.kmp.log/Log.Level, kotlin/String?, kotlin/Throwable?): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.log|log(io.matthewnelson.kmp.log.Log.Level;kotlin.String?;kotlin.Throwable?){}[0]
        final fun toString(): kotlin/String // io.matthewnelson.kmp.log/Log.Logger.toString|toString(){}[0]
        final inline fun d(kotlin/Function0<kotlin/Any?>): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.d|d(kotlin.Function0<kotlin.Any?>){}[0]
        final inline fun d(kotlin/String): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.d|d(kotlin.String){}[0]
        final inline fun d(kotlin/String?, kotlin/Throwable?): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.d|d(kotlin.String?;kotlin.Throwable?){}[0]
        final inline fun d(kotlin/Throwable): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.d|d(kotlin.Throwable){}[0]
        final inline fun d(kotlin/Throwable?, kotlin/Function0<kotlin/Any?>): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.d|d(kotlin.Throwable?;kotlin.Function0<kotlin.Any?>){}[0]
        final inline fun e(kotlin/Function0<kotlin/Any?>): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.e|e(kotlin.Function0<kotlin.Any?>){}[0]
        final inline fun e(kotlin/String): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.e|e(kotlin.String){}[0]
        final inline fun e(kotlin/String?, kotlin/Throwable?): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.e|e(kotlin.String?;kotlin.Throwable?){}[0]
        final inline fun e(kotlin/Throwable): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.e|e(kotlin.Throwable){}[0]
        final inline fun e(kotlin/Throwable?, kotlin/Function0<kotlin/Any?>): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.e|e(kotlin.Throwable?;kotlin.Function0<kotlin.Any?>){}[0]
        final inline fun i(kotlin/Function0<kotlin/Any?>): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.i|i(kotlin.Function0<kotlin.Any?>){}[0]
        final inline fun i(kotlin/String): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.i|i(kotlin.String){}[0]
        final inline fun i(kotlin/String?, kotlin/Throwable?): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.i|i(kotlin.String?;kotlin.Throwable?){}[0]
        final inline fun i(kotlin/Throwable): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.i|i(kotlin.Throwable){}[0]
        final inline fun i(kotlin/Throwable?, kotlin/Function0<kotlin/Any?>): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.i|i(kotlin.Throwable?;kotlin.Function0<kotlin.Any?>){}[0]
        final inline fun log(io.matthewnelson.kmp.log/Log.Level, kotlin/Function0<kotlin/Any?>): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.log|log(io.matthewnelson.kmp.log.Log.Level;kotlin.Function0<kotlin.Any?>){}[0]
        final inline fun log(io.matthewnelson.kmp.log/Log.Level, kotlin/String): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.log|log(io.matthewnelson.kmp.log.Log.Level;kotlin.String){}[0]
        final inline fun log(io.matthewnelson.kmp.log/Log.Level, kotlin/Throwable): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.log|log(io.matthewnelson.kmp.log.Log.Level;kotlin.Throwable){}[0]
        final inline fun log(io.matthewnelson.kmp.log/Log.Level, kotlin/Throwable?, kotlin/Function0<kotlin/Any?>): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.log|log(io.matthewnelson.kmp.log.Log.Level;kotlin.Throwable?;kotlin.Function0<kotlin.Any?>){}[0]
        final inline fun v(kotlin/Function0<kotlin/Any?>): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.v|v(kotlin.Function0<kotlin.Any?>){}[0]
        final inline fun v(kotlin/String): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.v|v(kotlin.String){}[0]
        final inline fun v(kotlin/String?, kotlin/Throwable?): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.v|v(kotlin.String?;kotlin.Throwable?){}[0]
        final inline fun v(kotlin/Throwable): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.v|v(kotlin.Throwable){}[0]
        final inline fun v(kotlin/Throwable?, kotlin/Function0<kotlin/Any?>): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.v|v(kotlin.Throwable?;kotlin.Function0<kotlin.Any?>){}[0]
        final inline fun w(kotlin/Function0<kotlin/Any?>): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.w|w(kotlin.Function0<kotlin.Any?>){}[0]
        final inline fun w(kotlin/String): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.w|w(kotlin.String){}[0]
        final inline fun w(kotlin/String?, kotlin/Throwable?): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.w|w(kotlin.String?;kotlin.Throwable?){}[0]
        final inline fun w(kotlin/Throwable): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.w|w(kotlin.Throwable){}[0]
        final inline fun w(kotlin/Throwable?, kotlin/Function0<kotlin/Any?>): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.w|w(kotlin.Throwable?;kotlin.Function0<kotlin.Any?>){}[0]
        final inline fun wtf(kotlin/Function0<kotlin/Any?>): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.wtf|wtf(kotlin.Function0<kotlin.Any?>){}[0]
        final inline fun wtf(kotlin/String): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.wtf|wtf(kotlin.String){}[0]
        final inline fun wtf(kotlin/String?, kotlin/Throwable?): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.wtf|wtf(kotlin.String?;kotlin.Throwable?){}[0]
        final inline fun wtf(kotlin/Throwable): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.wtf|wtf(kotlin.Throwable){}[0]
        final inline fun wtf(kotlin/Throwable?, kotlin/Function0<kotlin/Any?>): kotlin/Int // io.matthewnelson.kmp.log/Log.Logger.wtf|wtf(kotlin.Throwable?;kotlin.Function0<kotlin.Any?>){}[0]

        final object Companion { // io.matthewnelson.kmp.log/Log.Logger.Companion|null[0]
            final fun checkDomain(kotlin/String?): kotlin/String? // io.matthewnelson.kmp.log/Log.Logger.Companion.checkDomain|checkDomain(kotlin.String?){}[0]
            final fun checkTag(kotlin/String?): kotlin/String // io.matthewnelson.kmp.log/Log.Logger.Companion.checkTag|checkTag(kotlin.String?){}[0]
            final fun of(kotlin/String?, kotlin/String?): io.matthewnelson.kmp.log/Log.Logger // io.matthewnelson.kmp.log/Log.Logger.Companion.of|of(kotlin.String?;kotlin.String?){}[0]
            final inline fun of(kotlin/String?): io.matthewnelson.kmp.log/Log.Logger // io.matthewnelson.kmp.log/Log.Logger.Companion.of|of(kotlin.String?){}[0]
        }
    }

    final object AbortHandler : io.matthewnelson.kmp.log/Log { // io.matthewnelson.kmp.log/Log.AbortHandler|null[0]
        final const val UID // io.matthewnelson.kmp.log/Log.AbortHandler.UID|{}UID[0]
            final fun <get-UID>(): kotlin/String // io.matthewnelson.kmp.log/Log.AbortHandler.UID.<get-UID>|<get-UID>(){}[0]

        final val isInstalled // io.matthewnelson.kmp.log/Log.AbortHandler.isInstalled|{}isInstalled[0]
            final fun <get-isInstalled>(): kotlin/Boolean // io.matthewnelson.kmp.log/Log.AbortHandler.isInstalled.<get-isInstalled>|<get-isInstalled>(){}[0]
    }

    final object Root { // io.matthewnelson.kmp.log/Log.Root|null[0]
        final fun get(kotlin/String): io.matthewnelson.kmp.log/Log? // io.matthewnelson.kmp.log/Log.Root.get|get(kotlin.String){}[0]
        final fun install(io.matthewnelson.kmp.log/Log): kotlin/Boolean // io.matthewnelson.kmp.log/Log.Root.install|install(io.matthewnelson.kmp.log.Log){}[0]
        final fun installed(): kotlin.collections/List<io.matthewnelson.kmp.log/Log> // io.matthewnelson.kmp.log/Log.Root.installed|installed(){}[0]
        final fun toString(): kotlin/String // io.matthewnelson.kmp.log/Log.Root.toString|toString(){}[0]
        final fun uninstall(kotlin/String): kotlin/Boolean // io.matthewnelson.kmp.log/Log.Root.uninstall|uninstall(kotlin.String){}[0]
        final fun uninstallAll(kotlin/Boolean) // io.matthewnelson.kmp.log/Log.Root.uninstallAll|uninstallAll(kotlin.Boolean){}[0]
        final inline fun installOrThrow(io.matthewnelson.kmp.log/Log) // io.matthewnelson.kmp.log/Log.Root.installOrThrow|installOrThrow(io.matthewnelson.kmp.log.Log){}[0]
        final inline fun uninstall(io.matthewnelson.kmp.log/Log): kotlin/Boolean // io.matthewnelson.kmp.log/Log.Root.uninstall|uninstall(io.matthewnelson.kmp.log.Log){}[0]
        final inline fun uninstallOrThrow(io.matthewnelson.kmp.log/Log) // io.matthewnelson.kmp.log/Log.Root.uninstallOrThrow|uninstallOrThrow(io.matthewnelson.kmp.log.Log){}[0]
        final inline fun uninstallOrThrow(kotlin/String) // io.matthewnelson.kmp.log/Log.Root.uninstallOrThrow|uninstallOrThrow(kotlin.String){}[0]
    }
}

// Targets: [js, wasmJs]
final fun (io.matthewnelson.kmp.log/Log.Root).io.matthewnelson.kmp.log.internal.node/isNodeJs(): kotlin/Boolean // io.matthewnelson.kmp.log.internal.node/isNodeJs|isNodeJs@io.matthewnelson.kmp.log.Log.Root(){}[0]
